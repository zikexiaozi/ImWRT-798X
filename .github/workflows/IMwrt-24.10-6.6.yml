name: IMwrt-24.10-6.6

on:
  repository_dispatch:
    types: [build_firmware]
  workflow_dispatch:
    inputs:
      device_model:
        description: '选择目标设备型号'
        type: choice
        required: true
        options:
          - cmcc_rax3000m-emmc
      enable_5g_25db:
        description: '启用 5G 25dB 修改'
        type: boolean
        required: true
        default: true
      upload_bin_dir:  # Consider implementing or removing this input
        description: '上传 bin 目录'
        type: boolean
        required: false
        default: false
      repo_url:
        description: '源仓库 URL'
        default: 'https://github.com/padavanonly/immortalwrt-mt798x-24.10'
      repo_branch:
        description: '源仓库分支'
        default: 'openwrt-24.10-6.6'
  schedule:
    - cron: '40 15 * * *'  # test

permissions:
  contents: write
  actions: write

env:
  REPO_URL: ${{ github.event.inputs.repo_url || 'https://github.com/padavanonly/immortalwrt-mt798x-24.10' }}
  REPO_BRANCH: ${{ github.event.inputs.repo_branch || 'openwrt-24.10-6.6' }}
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 24.10-6.6.config
  CONFIG_FILE_MTKSDK: rax3000m-emmc_mtksdk.config
  DIY_SH: diy-part.sh
  FREE_DISK_SH: free_disk_space.sh
  ENV_SH: environment.sh
  CLASH_CORE: scripts/preset-clash-core.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  ENABLE_5G_25DB: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.enable_5g_25db || secrets.ENABLE_5G_25DB || 'true' }}

jobs:
  check-source-updates:
    runs-on: ubuntu-22.04
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: 检出本仓库代码
        uses: actions/checkout@v4

      - name: 下载上次检查的 SHA
        uses: actions/download-artifact@v4
        with:
          name: last-checked-sha
        continue-on-error: true  # Continue if artifact doesn't exist (first run)

      - name: 安装 GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: 检查源仓库更新
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Ensure token is available for gh
        run: |
          LATEST_SHA=$(curl -s -f -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/padavanonly/immortalwrt-mt798x-24.10/commits/${{ env.REPO_BRANCH }}" | jq -r '.sha' || echo "")
          if [ -z "$LATEST_SHA" ]; then
            echo "无法获取最新 SHA，跳过编译"
            echo "should_build=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          LAST_CHECKED_FILE="last_checked_sha.txt"
          LAST_CHECKED_SHA=$(cat "$LAST_CHECKED_FILE" 2>/dev/null || echo "")
          if [ "$LATEST_SHA" != "$LAST_CHECKED_SHA" ]; then
            echo "检测到源仓库更新：$LATEST_SHA"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "$LATEST_SHA" > "$LAST_CHECKED_FILE"
          else
            echo "源仓库无更新，跳过编译"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: 上传上次检查的 SHA
        if: steps.check.outputs.should_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: last-checked-sha
          path: last_checked_sha.txt

  build:
    needs: check-source-updates
    if: github.event_name == 'workflow_dispatch' || needs.check-source-updates.outputs.should_build == 'true'
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        device_model: ${{ github.event_name == 'workflow_dispatch' && fromJSON(format('["{0}"]', github.event.inputs.device_model)) || fromJSON('["cmcc_rax3000m-emmc"]') }}
      max-parallel: 18
    steps:
      - name: 调试信息
        run: |
          echo "触发方式: ${{ github.event_name }}"
          echo "设备型号: ${{ matrix.device_model }}"
          echo "5G 25dB: ${{ env.ENABLE_5G_25DB }}"
          echo "上传 bin 目录: ${{ github.event.inputs.upload_bin_dir }}"

      - name: 检出代码
        uses: actions/checkout@v4

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          chmod +x $FREE_DISK_SH && $FREE_DISK_SH
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo apt-get update
          chmod +x $ENV_SH && $ENV_SH
          sudo apt-get autoremove --purge
          sudo apt-get clean
          sudo timedatectl set-timezone "$TZ" || echo "Warning: Failed to set timezone"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: 检查空间使用情况
        if: (!cancelled())
        run: df -hT

      - name: 配置 ccache
        run: |
          echo "export PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          echo "export CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
          ccache -M 10G

      - name: 安装 GitHub CLI
        run: |
          sudo apt-get install -y gh

      - name: 克隆源码
        working-directory: /workdir
        run: |
          if [ -d "/workdir/openwrt" ]; then
            echo "检测到 openwrt 目录已存在，正在清理..."
            rm -rf /workdir/openwrt
          fi
          for i in {1..3}; do
            git clone $REPO_URL -b $REPO_BRANCH openwrt && break
            echo "克隆失败，重试 $i/3"
            sleep 5
          done
          if [ ! -d "/workdir/openwrt" ]; then
            echo "错误：源码克隆失败"
            exit 1
          fi
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: 加载 Feeds
        timeout-minutes: 10
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          
      - name: 更新 Feeds
        timeout-minutes: 30
        run: |
          cd openwrt
          ./scripts/feeds update -a || { echo "更新 Feeds 失败"; exit 1; }
          ./scripts/feeds install -a || { echo "安装 Feeds 失败"; exit 1; }

      - name: 加载配置
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          echo "CONFIG_TARGET_mediatek_filogic_DEVICE_${{ matrix.device_model }}=y" >> openwrt/.config
          cd openwrt
          
      - name: 导入补丁配置
        run: |
          [ -e $CONFIG_FILE_MTKSDK ] && cat $CONFIG_FILE_MTKSDK >> openwrt/.config
          chmod +x $GITHUB_WORKSPACE/$DIY_SH && $GITHUB_WORKSPACE/$DIY_SH
          chmod +x $GITHUB_WORKSPACE/$CLASH_CORE && $GITHUB_WORKSPACE/$CLASH_CORE
          make defconfig

      - name: 下载软件包
        timeout-minutes: 30
        run: |
          cd openwrt
          make download -j8 || { echo "下载软件包失败"; exit 1; }
          find dl -size -1024c -exec rm -f {} \; || echo "Warning: Failed to clean small files in dl directory"
  
      - name: 修改 5G 25dB
        if: env.ENABLE_5G_25DB == 'true'
        working-directory: ./openwrt
        run: |
          EEPROM_FILE=$(find package -name MT7981_iPAiLNA_EEPROM.bin 2>/dev/null | head -n 1)
          if [ -z "$EEPROM_FILE" ]; then
            echo "错误：未找到 EEPROM 文件"
            exit 1
          fi
          EXPECTED_CONTENT=$(printf '\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B')
          CURRENT_CONTENT=$(dd if="$EEPROM_FILE" bs=1 skip=$((0x445)) count=20 2>/dev/null || echo "")
          if [ "$CURRENT_CONTENT" != "$EXPECTED_CONTENT" ]; then
            printf '\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B' | dd of="$EEPROM_FILE" bs=1 seek=$((0x445)) conv=notrunc
            echo "EEPROM 文件已更新: $EEPROM_FILE"
          else
            echo "EEPROM 文件无需修改: $EEPROM_FILE"
          fi

      - name: 编译固件
        id: compile
        timeout-minutes: 180
        run: |
          set -e
          cd openwrt
          make -j$(nproc) V=s || make -j4 V=s || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DEVICE_NAME=_${{ matrix.device_model }}" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 上传编译日志
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: compile-log-${{ matrix.device_model }}
          path: |
            openwrt/build_dir/**/*.log
            openwrt/logs/*.log
            openwrt/*.log

      - name: 提取固件版本号
        id: version
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt
          VERSION=$(git rev-parse --short HEAD | cut -d'-' -f1 || echo "unknown")
          SAFE_VERSION="r${VERSION}"
          echo "提取的版本号: $SAFE_VERSION"
          echo "FIRMWARE_VERSION=$SAFE_VERSION" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 整理固件并固定文件名
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status == 'success'
        run: |
          set -e
          cd openwrt/bin/targets/*/*
          rm -rf packages
          for file in *sysupgrade* *factory*; do
            if [ -f "$file" ] && ! echo "$file" | grep -q "-bl2"; then
              TYPE=$(echo "$file" | grep -o "sysupgrade\|factory")
              EXT="${file##*.}"
              NEW_NAME="${{ matrix.device_model }}_25dB-${{ env.ENABLE_5G_25DB == 'true' && 'on' || 'off' }}_${{ env.FIRMWARE_VERSION }}${{ env.FILE_DATE }}_${TYPE}.${EXT}"
              mv "$file" "$NEW_NAME"
            fi
          done
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 生成标签和发布描述
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success'
        run: |
          set -e
          echo "RELEASE_TAG=ImmortalWrt-24.10-${{ matrix.device_model }}-${{ env.FIRMWARE_VERSION }}${{ env.FILE_DATE }}" >> $GITHUB_OUTPUT
          cat << EOF > release.txt
          
          **固件版本**: ImmortalWrt ${{ env.FIRMWARE_VERSION }}  
          **设备**: ${{ matrix.device_model }}  
          **编译时间**: $(date +"%Y-%m-%d %H:%M %Z")  
          **高功率模式**: ${{ env.ENABLE_5G_25DB == 'true' && '已启用' || '未启用' }}  
          EOF
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 发布固件
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.RELEASE_TAG }}
          body_path: release.txt
          files: |
            ${{ env.FIRMWARE }}/*sysupgrade*.*
            ${{ env.FIRMWARE }}/*factory*.*
          overwrite: true
          
      - name: 清理旧 Releases
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release list --repo ${{ github.repository }} --limit 100 --json name --jq '.[] | select(.name | test("ImmortalWrt-24.10-${{ matrix.device_model }}")) | .name' | tail -n +3 | xargs -I {} gh release delete {} --yes || true

      - name: 清理旧工作流运行
        if: steps.tag.outputs.status == 'success'
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 14  # Increased to retain more history
          keep_minimum_runs: 5  # Increased to keep more runs
